import tweepy
from django.conf import settings
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.db.models import Q
#from .models import AuthorizedPersonnel
#from .models import Alert
from .forms import CampaignForm, AdSetForm, AdForm, CreativeForm, VacanteForm, UploadFileForm
from .models import Campaign, AdSet, Ad, Creative, Vacante, Post
from django. http import JsonResponse 
import requests
import os
from dotenv import load_dotenv
from django.contrib.auth.decorators import user_passes_test
from .utils.ai import generar_message_creative, generar_body_creative
from django.urls import reverse

import pandas as pd
from django.db import IntegrityError
from .models import AdvertiserTikTok, CampaignTikTok, AdGroupTikTok, AdTikTok
from .forms import AdvertiserTikTokForm, CampaignTikTokForm, AdGroupTikTokForm, AdTikTokForm
from django.contrib.auth.decorators import login_required
from django.contrib.admin.views.decorators import staff_member_required


# Cargar variables desde el .env
load_dotenv()

# Verificar que el usuario es staff (administrador)
def es_staff(user):
    return user.is_authenticated and user.is_staff

# Obtener valores

ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
AD_ACCOUNT_ID = os.getenv("ADD_ACCOUNT_ID")
API_VERSION = os.getenv("API_VERSION")
BASE_URL = os.getenv("BASE_URL")
PAGE_ID = os.getenv("PAGE_ID")

# Create your views here.
#@login_required esto es de autenticacion



def panel(request):
    return render(request, 'panel.html')

@login_required
def estadisticas(request):
    return render(request, 'estadisticas.html')


@login_required
def crear_post_tiktok(request):
    
    return render(request, 'crear_post_tiktok.html')

@login_required
def mis_solicitudes_post_tiktok(request):
    
    return render(request, 'mis_solicitudes_post_tiktok.html')

@login_required
@user_passes_test(lambda u: u.is_staff)
def revisar_contenido_pendiente_post_tiktok(request):
    
    return render(request, 'revisar_contenido_pendiente_post_tiktok.html')



#@login_required
def crear_ads(request):
    return render(request, 'crear_ads.html')

#def vacantes(request):
   # return render(request, 'mis_vacantes.html')

#---------------------- KEYS API X ----------------------#

client = tweepy.Client(
    consumer_key=settings.TWITTER_API_KEY,
    consumer_secret=settings.TWITTER_API_SECRET,
    access_token=settings.TWITTER_ACCESS_TOKEN,
    access_token_secret=settings.TWITTER_ACCESS_SECRET
)


#---------------------- APROBACI√ìN O RECHAZO ADS ----------------------#
#Vista para listar anuncios pendientes
@user_passes_test(lambda u: u.is_staff)
def revisar_contenido_pendiente(request, tipo):
    MODELOS = {
        'ad': Ad,
        'post': Post,
    }

    Modelo = MODELOS.get(tipo)
    if not Modelo:
        messages.error(request, "Tipo de contenido inv√°lido.")
        return redirect("home")  # o donde corresponda

    contenido_pendiente = Modelo.objects.filter(revision__estado="PENDIENTE")

    return render(request, "contenido_pendiente.html", {
        "contenidoo": contenido_pendiente,
        "tipo": tipo
    })


# Vista para actualizar estado y comentario (nuevo)
# Se llama con actualizar_estado_contenido
@user_passes_test(lambda u: u.is_staff)
def aprobar_contenido(request, tipo, objeto_id):
    MODELOS = {
        'ad': Ad,
        'post': Post,
    }

    Modelo = MODELOS.get(tipo)
    if not Modelo:
        messages.error(request, "Tipo de contenido inv√°lido.")
        return redirect("revisar_contenido_pendiente")

    objeto = get_object_or_404(Modelo, pk=objeto_id)

    if not hasattr(objeto, 'revision') or objeto.revision is None:
        messages.error(request, f"Este {tipo} no tiene una revisi√≥n asociada.")
        #return redirect("revisar_contenido_pendiente")
        return redirect(reverse('revisar_contenido_pendiente', kwargs={'tipo':tipo}))


    revision = objeto.revision

    if request.method == "POST":
        nuevo_estado = request.POST.get("estado")
        comentario = request.POST.get("comentario")

        revision.estado = nuevo_estado
        revision.comentario_admin = comentario

        try:
            if nuevo_estado == "Aprobado":
                if tipo == "ad":
                    if(crear_ad_meta(request, objeto)):
                        messages.success(request, "Anuncio aprobado y publicado en Meta.")
                    else:
                        messages.success(request, "Hubo un error en la creaci√≥n del anuncio.")
                        revision.estado = "Rechazado"
                elif tipo == "post":
                    # Solo para posts: publicar en X (Twitter)
                    #client.create_tweet(text=objeto.nombre)  # o texto, seg√∫n tu modelo
                    messages.success(request, "Post aprobado y publicado en X (Twitter).")
                    messages.success(request, "Publicaci√≥n aprobada.")
            else:
                messages.success(request, "Estado actualizado.")
        except Exception as e:
            messages.error(request, f"Error en la acci√≥n de publicaci√≥n: {str(e)}")

        revision.save()
        return redirect(reverse('revisar_contenido_pendiente', kwargs={'tipo': tipo}))

    return render(request, "aprobar_contenido.html", {"objeto": objeto, "tipo": tipo})

# Vista para listar estado anuncios (usuario normal)
@login_required
def mis_solicitudes_contenido(request, tipo):
    MODELOS = {
        'ad': Ad,
        'post': Post,
    }

    Modelo = MODELOS.get(tipo)
    if not Modelo:
        messages.error(request, "Tipo de contenido inv√°lido.")
        return redirect("home")  # o donde corresponda
    
    estado = request.GET.get('estado')

    if not estado:  # Si no se seleccion√≥ estado o es vac√≠o, traer todos
        contenido_pendiente = Modelo.objects.filter(revision__usuario=request.user)
    else:
        contenido_pendiente = Modelo.objects.filter(revision__usuario=request.user, revision__estado=estado)

    return render(request, "mis_solicitudes_contenido.html", {
        "contenidoo": contenido_pendiente,
        "tipo": tipo,
        "estado_seleccionado": estado  # para mantener seleccionado en el HTML
    })

    


# ---------------------- API DE X ----------------------#
# Configurar autenticaci√≥n con Tweepy
# Autenticaci√≥n con la API v2

@login_required
def crear_post(request):
    if request.method == "POST":
        tweet_text = request.POST.get("tweet")
        if tweet_text:
            try:
                #client.create_tweet(text=tweet_text)  # Publica el tweet
                #messages.success(request, "¬°Tweet publicado correctamente!")
                #ad = Ad.objects.create(texto=tweet_text, usuario= request.user)
                # Crear la revisi√≥n asociada al usuario autenticado
                revision = Revision.objects.create(
                    usuario=request.user,  # Usuario que est√° haciendo el request
                    estado='Pendiente',    # Estado inicial
                )
                post = Post.objects.create(texto=tweet_text, revision=revision)
                messages.success(request, "¬°El anuncio fue enviado para aprobaci√≥n!")
            except Exception as e:
                messages.error(request, f"Error al publicar el tweet: {str(e)}")

        return redirect("crear_post")  # Redirecciona a la misma p√°gina
    
    return render(request, "crear_post.html")


# ---------------------- CREAR CAMPA√ëA META ----------------------#
def campa√±a(request):
    if request.method == "POST":
        form = CampaignForm(request.POST) 
    else:
        form = CampaignForm()

    return render(request, 'campa√±a.html', {'form': form})

def crear_campa√±a(request):
    if request.method == "POST":
        form = CampaignForm(request.POST)
        if form.is_valid():
            # Guarda en la base de datos sin el ID de meta
            form.save()  
            messages.success(request, "¬°Los datos de campa√±a se ingresaron exitosamente!")

            # Evita guardarlo a√∫n en la BD para guardar despu√©s con ID de meta
            #campa√±a = form.save(commit=False)  

            # Obtener los datos ingresados por el usuario
            nombre = form.cleaned_data['nombre']
            objective = form.cleaned_data['objective']

            # Construir la URL y par√°metros para la API
            url = f"{BASE_URL}/{AD_ACCOUNT_ID}/campaigns"
            payload = {
                "name": nombre,
                "objective": objective,
                "status": "PAUSED",  # Para evitar gastos accidentales
                "special_ad_categories": [],  
                "access_token": ACCESS_TOKEN
            }
            #'''
            try:
                # Hacer la solicitud POST a la API
                response = requests.post(url, json=payload)
                respuesta_json = response.json()


                # Verificar la respuesta de la API
                if response.status_code == 200 and "id" in respuesta_json:
                    # Asignar el ID de la API de Meta a la campa√±a en Django
                    campa√±a.campaign_id = respuesta_json["id"]
                    campa√±a.save()  # Ahora s√≠ guardamos en la BD

                    messages.success(request, f"‚úÖ Campa√±a creada exitosamente. ID: {campa√±a.campaign_id}")
                else:
                    error_msg = respuesta_json.get("error", {}).get("message", "No se pudo crear la campa√±a")
                    messages.error(request, f"‚ùå Error al crear la campa√±a en Meta: {error_msg}")
                    print(error_msg)


            except requests.exceptions.RequestException as e:
                messages.error(request, f"üö® Error en la solicitud: {e}")
                #'''

            return redirect('campa√±a')  # Redirige despu√©s de la solicitud

        else:
            messages.error(request, "Hubo un error al crear la campa√±a. Revisa los campos.")

    form = CampaignForm()
    return render(request, 'campa√±a.html', {'form': form})


def mis_campa√±as(request):
    campa√±as = Campaign.objects.all()
    return render(request, 'mis_campa√±as.html', {'campa√±as':campa√±as})


# ---------------------- CREAR ADSET META ----------------------#

# Diccionario de Objective -> Optimization Goals permitidos
OPTIMIZATION_GOALS = {
    "BRAND_AWARENESS": ["IMPRESSIONS", "REACH"],
    "ENGAGEMENT": ["POST_ENGAGEMENT", "VIDEO_VIEWS", "IMPRESSIONS", "REACH"],
    "LEAD_GENERATION": ["LEAD_GENERATION", "QUALITY_LEAD", "IMPRESSIONS"],
    "CONVERSIONS": ["CONVERSIONS", "VALUE", "LANDING_PAGE_VIEWS"],
}

def ad_set(request):
    form = AdSetForm()
    return render(request, 'ad_set.html', {'form': form})

def crear_adset(request):
    if request.method == "POST":
        form = AdSetForm(request.POST)
        if form.is_valid():
            adset = form.save(commit=False)

            # Verificar que la campa√±a existe en la BD y tiene un ID en Meta
            try:
                campaign = Campaign.objects.get(nombre=adset.campaign_id)
            except Campaign.DoesNotExist:
                messages.error(request, "‚ùå La campa√±a a√∫n no ha sido creado en Meta.")
                return redirect('crear_adset')

            adset.save()  # TO-DO: Eliminar este save para guardarlo cuando ya se haya recibido el id de meta
            messages.success(request, "¬°Los datos de ad set se ingresaron exitosamente!")

            # Datos para la API de Meta
            url = f"{BASE_URL}/{AD_ACCOUNT_ID}/adsets"
            payload = {
                "name": adset.nombre,
                "campaign_id": adset.campaign_id,
                "daily_budget": adset.daily_budget,
                "billing_event": adset.billing_event,  # Se puede hacer din√°mico seg√∫n la necesidad
                "optimization_goal": adset.optimization_goal,
                "status": "PAUSED",
                "access_token": ACCESS_TOKEN
            }
            #'''
            try:
                response = requests.post(url, json=payload)
                respuesta_json = response.json()

                if response.status_code == 200 and "id" in respuesta_json:
                    adset.adset_id = respuesta_json["id"]
                    adset.save()
                    messages.success(request, f"‚úÖ AdSet creado exitosamente. ID: {adset.adset_id}")
                else:
                    error_msg = respuesta_json.get("error", {}).get("message", "No se pudo crear el AdSet")
                    messages.error(request, f"‚ùå Error en Meta: {error_msg}")

            except requests.exceptions.RequestException as e:
                messages.error(request, f"üö® Error en la solicitud: {e}")
            ##'''
            return redirect('crear_adset')
        
        else:
            messages.error(request, "Hubo un error al crear el adset. Revisa los campos.") 

    # Limpiar mensajes antes de renderizar la p√°gina
    storage = messages.get_messages(request)
    storage.used = True  

    form = AdSetForm()
    return render(request, 'ad_set.html', {'form': form})

def mis_adsets(request):
    adsets = AdSet.objects.all()
    return render(request, 'mis_adsets.html', {'adsets': adsets})


def obtener_optimization_goals(request):
    campaign_id = request.GET.get("campaign_id")
    print(f"üîç Buscando campaign_id: {campaign_id}")  # LOG

    try:
        campaign = Campaign.objects.get(id=campaign_id)
        print(f"‚úÖ Campa√±a encontrada: {campaign.nombre}, Objetivo: {campaign.objective}")  # LOG
        optimization_goals = OPTIMIZATION_GOALS.get(campaign.objective, [])
        print(f"üéØ Optimization Goals disponibles: {optimization_goals}")  # LOG

        return JsonResponse({"optimization_goals": optimization_goals})
    except Campaign.DoesNotExist:
        print("‚ùå Campa√±a no encontrada")  # LOG
        return JsonResponse({"error": "Campa√±a no encontrada"}, status=404)



# ---------------------- CREAR ANUNCIO META  ----------------------#

def ad(request):
    form = AdForm()
    return render(request, 'ad.html', {'form': form})

from administrador.models import Revision  # Aseg√∫rate de importar el modelo Revision

def crear_ad(request):
    if request.method == "POST":
        form = AdForm(request.POST)  
        if form.is_valid():
            ad = form.save(commit=False)
            ad.estado = 'PENDIENTE'
            ad.save()

            # Crear la revisi√≥n asociada al usuario autenticado
            revision = Revision.objects.create(
                usuario=request.user,  # Usuario que est√° haciendo el request
                estado='Pendiente',    # Estado inicial
            )

            # Asignar la revisi√≥n al anuncio
            ad.revision = revision

            # Guardar el anuncio (con la revisi√≥n asignada)
            ad.save()

            messages.success(request, "¬°Los datos del ad se ingresaron exitosamente y se enviaron para ser revisados!")

            return redirect('crear_ad')

        else:
            print(form.errors)
            messages.error(request, "Hubo un error al crear el ad. Revisa los campos.") 

    # Limpiar mensajes antes de renderizar la p√°gina
    storage = messages.get_messages(request)
    storage.used = True  

    form = AdForm()
    return render(request, 'ad.html', {'form': form})


def crear_ad_meta(request, ad):
    print("Se llam√≥ la funci√≥n de crear_ad_meta")
    return True
    '''
     # Datos para la API de Meta
    url = f"{BASE_URL}/{AD_ACCOUNT_ID}/ads"
    payload = {
        "name": ad.nombre,
        "adset_id": ad.adset_id,
        "status": "PAUSED",
        "creative": {"creative_id": ad.creative_id},  # Debes haber creado el Creative antes
        "access_token": ACCESS_TOKEN
    }
    
    try:
        response = requests.post(url, data=payload)
        respuesta_json = response.json()

        if response.status_code == 200 and "id" in respuesta_json:
            ad.ad_id = respuesta_json["id"]
            ad.save()
            messages.success(request, f"‚úÖ Anuncio creado. ID: {ad.ad_id}")
            return True
        else:
            error_msg = respuesta_json.get("error", {}).get("message", "No se pudo crear el anuncio")
            messages.error(request, f"‚ùå Error en Meta: {error_msg}")
            return False
    except requests.exceptions.RequestException as e:
        messages.error(request, f"üö® Error en la solicitud: {e}")
    '''
            

def mis_ads(request):
    ads = Ad.objects.all()
    return render(request, 'mis_ads.html', {'ads': ads})

# ---------------------- GENERAR TEXTO CON IA PARA CREATIVES----------------------#
# para b√∫squeda de vacantes

def buscar_vacante(request):
    q = request.GET.get("q", "")
    resultados = Vacante.objects.filter(vacante__icontains=q)[:10]
    data = [{"id": v.id, "vacante": v.vacante} for v in resultados]
    return JsonResponse(data, safe=False)




def generar_message_ia(request):
    if request.method == "POST":
        prompt = request.POST.get("prompt", "")
        vacante_id = request.POST.get("vacante_id")

        vacante_info = ""
        if vacante_id:
            try:
                vacante = Vacante.objects.get(id=vacante_id)
                vacante_info = f"""
                Vacante: {vacante.vacante}
                Empresa: {vacante.empresa}
                Ubicaci√≥n: {vacante.ubicacion}
                Modalidad: {vacante.modalidad}
                Salario: {vacante.salario}
                Experiencia: {vacante.experiencia}
                Descripci√≥n: {vacante.descripcion}
                """
            except Vacante.DoesNotExist:
                pass

        texto = generar_message_creative(prompt, vacante_info)
        return JsonResponse({"texto": texto})

def generar_body_ia(request):
    if request.method == "POST":
        prompt = request.POST.get("prompt", "")
        vacante_id = request.POST.get("vacante_id")

        vacante_info = ""
        if vacante_id:
            try:
                vacante = Vacante.objects.get(id=vacante_id)
                vacante_info = f"""
                Vacante: {vacante.vacante}
                Empresa: {vacante.empresa}
                Ubicaci√≥n: {vacante.ubicacion}
                Modalidad: {vacante.modalidad}
                Salario: {vacante.salario}
                Experiencia: {vacante.experiencia}
                Descripci√≥n: {vacante.descripcion}
                """
            except Vacante.DoesNotExist:
                pass

        texto = generar_body_creative(prompt, vacante_info)
        return JsonResponse({"texto": texto})


# ---------------------- CREAR CREATIVE META  ----------------------#

def crear_creative(request):
    if request.method == "POST":
        form = CreativeForm(request.POST)

        if form.is_valid():
            creative = form.save(commit=False)  
            creative.save()  # TO-DO: Eliminar este save para guardarlo cuando ya se haya recibido el id de meta
            print("se salvaron los datos")
            messages.success(request, "¬°Los datos del creative set se ingresaron exitosamente!")

            # Construir payload para la API de Meta
            payload = {
                "name": creative.nombre,  # Nombre interno para identificaci√≥n en la API
                "body": creative.body or "", # Cuerpo del anuncio
                "object_story_spec": {
                    "page_id": PAGE_ID,
                    "link_data": {
                        "message": creative.message, # Mensaje principal
                        "name": creative.name,  # T√≠tulo visible en el anuncio
                        "image_url": creative.image_url,
                        "call_to_action": {
                            "type": creative.call_to_action,
                            "value": {
                                "link": creative.link # Enlace al que redirijir√° el anuncio
                            }
                        }
                    }
                },
                "access_token": ACCESS_TOKEN
            }

            return render(request, "creative.html", {"form": form, "creative":creative})

            '''
            # Enviar solicitud a Meta para crear el Creative
            url = f"{BASE_URL}/act_{AD_ACCOUNT_ID}/adcreatives"
            response = requests.post(url, json=payload)
            data = response.json()

            if response.status_code == 200 and "id" in data:
                creative.creative_id = data["id"]
                creative.save()
                messages.success(request, f"Creative creado con ID: {creative.creative_id}")
                return redirect("crear_creative")  # Redirige a la p√°gina de √©xito
            else:
                error_msg = data.get("error", {}).get("message", "Error desconocido")
                messages.error(request, f"Error en Meta: {error_msg}")
            
            #'''
        else:
            print(form.errors)
            messages.error(request, "Hubo un error al crear el adset. Revisa los campos.")

    else:
        form = CreativeForm()

    # Limpiar mensajes antes de renderizar la p√°gina
    storage = messages.get_messages(request)
    storage.used = True  

    form = CreativeForm()

    return render(request, "creative.html", {"form": form})

def mis_creatives(request):
    creatives = Creative.objects.all()
    return render(request, 'mis_creatives.html', {'creatives':creatives})

# ---------------------- VER MIS VACANTES ----------------------#

def mis_vacantes(request):
    if request.method == 'POST':
        # Obt√©n los datos del formulario
        vacante = request.POST.get('vacante')
        empresa = request.POST.get('empresa')
        ubicacion = request.POST.get('ubicacion')
        contrato = request.POST.get('contrato')
        salario = request.POST.get('salario')
        descripcion = request.POST.get('descripcion')

        # Verifica que todos los campos obligatorios est√©n completos
        if not all([vacante, empresa, ubicacion, contrato, salario]):
            return render(request, 'mis_vacantes.html', {
                'error': 'Por favor, completa todos los campos obligatorios.',
                'vacantes': Vacante.objects.all()
            })

        # Guarda la nueva vacante en la base de datos
        Vacante.objects.create(
            vacante=vacante,
            empresa=empresa,
            ubicacion=ubicacion,
            contrato=contrato,
            salario=salario,
            descripcion=descripcion
        )
        return redirect('mis_vacantes')  # Redirige a la misma p√°gina despu√©s de guardar

    # Manejar la b√∫squeda de vacantes
    query = request.GET.get('q')  # Obt√©n el t√©rmino de b√∫squeda del par√°metro 'q'
    if query:
        # Filtrar las vacantes que coincidan con el t√©rmino de b√∫squeda
        vacantes = Vacante.objects.filter(
            Q(vacante__icontains=query) |  # Buscar en el campo 'vacante'
            Q(empresa__icontains=query) |   # Buscar en el campo 'empresa'
            Q(grupo__icontains=query)   # Buscar en el campo 'grupo'
        )
    else:
        # Si no hay t√©rmino de b√∫squeda, muestra todas las vacantes
        vacantes = Vacante.objects.all()

    return render(request, 'mis_vacantes.html', {'vacantes': vacantes})



def cargar_excel(request):
    if request.method == 'POST':
        archivo = request.FILES.get('archivo_excel')
        if archivo:
            df = pd.read_excel(archivo)  #  pd.read_csv(archivo) si es CSV
            for _, row in df.iterrows():
                Vacante.objects.create(
                    vacante=row['vacante'],
                    empresa=row['empresa'],
                    ubicacion=row['ubicacion'],
                    contrato=row['contrato'],
                    salario=row['salario'],
                    descripcion=row.get('descripcion', ''),
                    industria=row.get('industria', ''),
                    modalidad=row.get('modalidad', ''),
                    experiencia=row.get('experiencia', '')
                )
        return redirect('vacantes')
    
# ------------------------------------------------------------#

# ---------------------- TIKTOK ----------------------#
# ----------- Advertiser TikTok -----------
@login_required
def advertiser_tiktok_list(request):
    advertisers = AdvertiserTikTok.objects.filter(usuario=request.user)
    return render(request, 'tiktoktemplates/advertiser_list.html', {'advertisers': advertisers})

@login_required
def advertiser_tiktok_create(request):
    if request.method == 'POST':
        form = AdvertiserTikTokForm(request.POST)
        if form.is_valid():
            advertiser = form.save(commit=False)
            advertiser.usuario = request.user
            advertiser.save()
            return redirect('advertiser_tiktok_list')
    else:
        form = AdvertiserTikTokForm()
    return render(request, 'tiktoktemplates/advertiser_form.html', {'form': form})

# ----------- Campaign TikTok -----------
@login_required
def campaign_tiktok_list(request, advertiser_id):
    campaigns = CampaignTikTok.objects.filter(advertiser_id=advertiser_id)
    return render(request, 'tiktoktemplates/campaign_list.html', {'campaigns': campaigns, 'advertiser_id': advertiser_id})

@login_required
def campaign_tiktok_create(request, advertiser_id):
    if request.method == 'POST':
        form = CampaignTikTokForm(request.POST)
        if form.is_valid():
            campaign = form.save(commit=False)
            campaign.advertiser_id = advertiser_id
            campaign.save()
            return redirect('campaign_tiktok_list', advertiser_id=advertiser_id)
    else:
        form = CampaignTikTokForm(initial={'advertiser': advertiser_id})
    return render(request, 'tiktoktemplates/campaign_form.html', {'form': form, 'advertiser_id': advertiser_id})

# ----------- Ad Group TikTok -----------
@login_required
def adgroup_tiktok_list(request, campaign_id):
    adgroups = AdGroupTikTok.objects.filter(campaign_id=campaign_id)
    return render(request, 'tiktoktemplates/adgroup_list.html', {'adgroups': adgroups, 'campaign_id': campaign_id})

@login_required
def adgroup_tiktok_create(request, campaign_id):
    if request.method == 'POST':
        form = AdGroupTikTokForm(request.POST)
        if form.is_valid():
            adgroup = form.save(commit=False)
            adgroup.campaign_id = campaign_id
            adgroup.save()
            return redirect('adgroup_tiktok_list', campaign_id=campaign_id)
    else:
        form = AdGroupTikTokForm(initial={'campaign': campaign_id})
    return render(request, 'tiktoktemplates/adgroup_form.html', {'form': form, 'campaign_id': campaign_id})

# ----------- Ad TikTok -----------
@login_required
def ad_tiktok_list(request, adgroup_id):
    ads = AdTikTok.objects.filter(adgroup_id=adgroup_id)
    return render(request, 'tiktoktemplates/ad_list.html', {'ads': ads, 'adgroup_id': adgroup_id})

@login_required
def ad_tiktok_create(request, adgroup_id):
    if request.method == 'POST':
        form = AdTikTokForm(request.POST, request.FILES)
        if form.is_valid():
            ad = form.save(commit=False)
            ad.adgroup_id = adgroup_id
            ad.save()
            return redirect('ad_tiktok_list', adgroup_id=adgroup_id)
    else:
        form = AdTikTokForm(initial={'adgroup': adgroup_id})
    return render(request, 'tiktoktemplates/ad_form.html', {'form': form, 'adgroup_id': adgroup_id})

@login_required
def adgroup_tiktok_all(request):
    adgroups = AdGroupTikTok.objects.all()
    return render(request, 'tiktoktemplates/adgroup_list.html', {'adgroups': adgroups, 'campaign_id': None})

@login_required
def ad_tiktok_all(request):
    ads = AdTikTok.objects.all()
    return render(request, 'tiktoktemplates/ad_list.html', {'ads': ads, 'adgroup_id': None})

@login_required
def adgroup_tiktok_create_select_campaign(request):
    from .models import CampaignTikTok
    campaigns = CampaignTikTok.objects.all()
    if request.method == "POST":
        campaign_id = request.POST.get("campaign_id")
        if campaign_id:
            return redirect('adgroup_tiktok_create', campaign_id=campaign_id)
    return render(request, 'tiktoktemplates/adgroup_select_campaign.html', {'campaigns': campaigns})

@login_required
def ad_tiktok_create_select_adgroup(request):
    from .models import AdGroupTikTok
    adgroups = AdGroupTikTok.objects.all()
    if request.method == "POST":
        adgroup_id = request.POST.get("adgroup_id")
        if adgroup_id:
            return redirect('ad_tiktok_create', adgroup_id=adgroup_id)
    return render(request, 'tiktoktemplates/ad_select_adgroup.html', {'adgroups': adgroups})

@staff_member_required
def revisar_ads_tiktok(request):
    ads_pendientes = AdTikTok.objects.filter(estado='PENDIENTE')
    return render(request, 'tiktoktemplates/revisar_ads_pendientes.html', {'ads': ads_pendientes})

@staff_member_required
def aprobar_rechazar_ad_tiktok(request, ad_id):
    ad = get_object_or_404(AdTikTok, id=ad_id)
    if request.method == 'POST':
        nuevo_estado = request.POST.get('estado')
        comentario = request.POST.get('comentario')
        ad.estado = nuevo_estado
        ad.comentario_admin = comentario
        ad.save()
        # Si apruebas, puedes ponerlo como PUBLICADO si quieres
        return redirect('revisar_ads_tiktok')
    return render(request, 'tiktoktemplates/aprobar_ad.html', {'ad': ad})

@login_required
def mis_solicitudes_ads_tiktok(request):
    estado = request.GET.get('estado')
    ads = AdTikTok.objects.filter(adgroup__campaign__advertiser__usuario=request.user)
    if estado:
        ads = ads.filter(estado=estado)
    return render(request, 'tiktoktemplates/mis_solicitudes_ads.html', {
        'ads': ads,
        'estado_seleccionado': estado
    })

def ads_tiktok_publicados(request):
    ads = AdTikTok.objects.filter(estado='APROBADO')
    return render(request, 'tiktoktemplates/ad_list.html', {'ads': ads, 'adgroup_id': None, 'solo_publicados': True})